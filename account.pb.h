// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: account.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_account_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_account_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_account_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_account_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_account_2eproto;
namespace account {
namespace protobuf {
class account_struct;
class account_structDefaultTypeInternal;
extern account_structDefaultTypeInternal _account_struct_default_instance_;
}  // namespace protobuf
}  // namespace account
PROTOBUF_NAMESPACE_OPEN
template<> ::account::protobuf::account_struct* Arena::CreateMaybeMessage<::account::protobuf::account_struct>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace account {
namespace protobuf {

// ===================================================================

class account_struct PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:account.protobuf.account_struct) */ {
 public:
  inline account_struct() : account_struct(nullptr) {};
  virtual ~account_struct();

  account_struct(const account_struct& from);
  account_struct(account_struct&& from) noexcept
    : account_struct() {
    *this = ::std::move(from);
  }

  inline account_struct& operator=(const account_struct& from) {
    CopyFrom(from);
    return *this;
  }
  inline account_struct& operator=(account_struct&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const account_struct& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const account_struct* internal_default_instance() {
    return reinterpret_cast<const account_struct*>(
               &_account_struct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(account_struct& a, account_struct& b) {
    a.Swap(&b);
  }
  inline void Swap(account_struct* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(account_struct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline account_struct* New() const final {
    return CreateMaybeMessage<account_struct>(nullptr);
  }

  account_struct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<account_struct>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const account_struct& from);
  void MergeFrom(const account_struct& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(account_struct* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "account.protobuf.account_struct";
  }
  protected:
  explicit account_struct(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_account_2eproto);
    return ::descriptor_table_account_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostipFieldNumber = 2,
    kAccountFieldNumber = 4,
    kPasswordFieldNumber = 5,
    kIsRegisterFieldNumber = 1,
    kTimeFieldNumber = 3,
  };
  // string hostip = 2;
  void clear_hostip();
  const std::string& hostip() const;
  void set_hostip(const std::string& value);
  void set_hostip(std::string&& value);
  void set_hostip(const char* value);
  void set_hostip(const char* value, size_t size);
  std::string* mutable_hostip();
  std::string* release_hostip();
  void set_allocated_hostip(std::string* hostip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hostip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hostip(
      std::string* hostip);
  private:
  const std::string& _internal_hostip() const;
  void _internal_set_hostip(const std::string& value);
  std::string* _internal_mutable_hostip();
  public:

  // string account = 4;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_account();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_account(
      std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string password = 5;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // bool is_register = 1;
  void clear_is_register();
  bool is_register() const;
  void set_is_register(bool value);
  private:
  bool _internal_is_register() const;
  void _internal_set_is_register(bool value);
  public:

  // int32 time = 3;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:account.protobuf.account_struct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  bool is_register_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_account_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// account_struct

// bool is_register = 1;
inline void account_struct::clear_is_register() {
  is_register_ = false;
}
inline bool account_struct::_internal_is_register() const {
  return is_register_;
}
inline bool account_struct::is_register() const {
  // @@protoc_insertion_point(field_get:account.protobuf.account_struct.is_register)
  return _internal_is_register();
}
inline void account_struct::_internal_set_is_register(bool value) {
  
  is_register_ = value;
}
inline void account_struct::set_is_register(bool value) {
  _internal_set_is_register(value);
  // @@protoc_insertion_point(field_set:account.protobuf.account_struct.is_register)
}

// string hostip = 2;
inline void account_struct::clear_hostip() {
  hostip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& account_struct::hostip() const {
  // @@protoc_insertion_point(field_get:account.protobuf.account_struct.hostip)
  return _internal_hostip();
}
inline void account_struct::set_hostip(const std::string& value) {
  _internal_set_hostip(value);
  // @@protoc_insertion_point(field_set:account.protobuf.account_struct.hostip)
}
inline std::string* account_struct::mutable_hostip() {
  // @@protoc_insertion_point(field_mutable:account.protobuf.account_struct.hostip)
  return _internal_mutable_hostip();
}
inline const std::string& account_struct::_internal_hostip() const {
  return hostip_.Get();
}
inline void account_struct::_internal_set_hostip(const std::string& value) {
  
  hostip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void account_struct::set_hostip(std::string&& value) {
  
  hostip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:account.protobuf.account_struct.hostip)
}
inline void account_struct::set_hostip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:account.protobuf.account_struct.hostip)
}
inline void account_struct::set_hostip(const char* value,
    size_t size) {
  
  hostip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:account.protobuf.account_struct.hostip)
}
inline std::string* account_struct::_internal_mutable_hostip() {
  
  return hostip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* account_struct::release_hostip() {
  // @@protoc_insertion_point(field_release:account.protobuf.account_struct.hostip)
  return hostip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void account_struct::set_allocated_hostip(std::string* hostip) {
  if (hostip != nullptr) {
    
  } else {
    
  }
  hostip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:account.protobuf.account_struct.hostip)
}
inline std::string* account_struct::unsafe_arena_release_hostip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:account.protobuf.account_struct.hostip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return hostip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void account_struct::unsafe_arena_set_allocated_hostip(
    std::string* hostip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hostip != nullptr) {
    
  } else {
    
  }
  hostip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hostip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:account.protobuf.account_struct.hostip)
}

// int32 time = 3;
inline void account_struct::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 account_struct::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 account_struct::time() const {
  // @@protoc_insertion_point(field_get:account.protobuf.account_struct.time)
  return _internal_time();
}
inline void account_struct::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void account_struct::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:account.protobuf.account_struct.time)
}

// string account = 4;
inline void account_struct::clear_account() {
  account_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& account_struct::account() const {
  // @@protoc_insertion_point(field_get:account.protobuf.account_struct.account)
  return _internal_account();
}
inline void account_struct::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:account.protobuf.account_struct.account)
}
inline std::string* account_struct::mutable_account() {
  // @@protoc_insertion_point(field_mutable:account.protobuf.account_struct.account)
  return _internal_mutable_account();
}
inline const std::string& account_struct::_internal_account() const {
  return account_.Get();
}
inline void account_struct::_internal_set_account(const std::string& value) {
  
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void account_struct::set_account(std::string&& value) {
  
  account_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:account.protobuf.account_struct.account)
}
inline void account_struct::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:account.protobuf.account_struct.account)
}
inline void account_struct::set_account(const char* value,
    size_t size) {
  
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:account.protobuf.account_struct.account)
}
inline std::string* account_struct::_internal_mutable_account() {
  
  return account_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* account_struct::release_account() {
  // @@protoc_insertion_point(field_release:account.protobuf.account_struct.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void account_struct::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:account.protobuf.account_struct.account)
}
inline std::string* account_struct::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_unsafe_arena_release:account.protobuf.account_struct.account)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return account_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void account_struct::unsafe_arena_set_allocated_account(
    std::string* account) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (account != nullptr) {
    
  } else {
    
  }
  account_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      account, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:account.protobuf.account_struct.account)
}

// string password = 5;
inline void account_struct::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& account_struct::password() const {
  // @@protoc_insertion_point(field_get:account.protobuf.account_struct.password)
  return _internal_password();
}
inline void account_struct::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:account.protobuf.account_struct.password)
}
inline std::string* account_struct::mutable_password() {
  // @@protoc_insertion_point(field_mutable:account.protobuf.account_struct.password)
  return _internal_mutable_password();
}
inline const std::string& account_struct::_internal_password() const {
  return password_.Get();
}
inline void account_struct::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void account_struct::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:account.protobuf.account_struct.password)
}
inline void account_struct::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:account.protobuf.account_struct.password)
}
inline void account_struct::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:account.protobuf.account_struct.password)
}
inline std::string* account_struct::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* account_struct::release_password() {
  // @@protoc_insertion_point(field_release:account.protobuf.account_struct.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void account_struct::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:account.protobuf.account_struct.password)
}
inline std::string* account_struct::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:account.protobuf.account_struct.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void account_struct::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:account.protobuf.account_struct.password)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace account

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_account_2eproto
